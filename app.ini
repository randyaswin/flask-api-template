[uwsgi]
module = app
callable = app

socket = 0.0.0.0:6072
protocol = http
chmod-socket = 660
enable-threads = true
master = true
master-fifo = /tmp/fifo0
cpu-affinity=1
die-on-term = true
on-term = true

vacuum = true                        ; Delete sockets during shutdown
single-interpreter = true
need-app = true

buffer-size = 32768

harakiri = 120                        ; forcefully kill workers after 60 seconds
py-callos-afterfork = true           ; allow workers to trap signals

max-requests = 100                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 2048                 ; Restart workers after this much resident memory
worker-reload-mercy = 60             ; How long to wait before forcefully killing workers

cheaper-algo = busyness
processes = 8                    ; Maximum number of workers allowed
cheaper = 4                          ; Minimum number of workers allowed
cheaper-initial = 4                ; Workers created at startup
cheaper-overload = 1                 ; Length of a cycle in seconds
cheaper-step = 2                ; How many workers to spawn at a time

cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
cheaper-busyness-min = 20            ; Below this threshold, kill workers (if stable for multiplier cycles)
cheaper-busyness-max = 80            ; Above this threshold, spawn new workers
cheaper-busyness-backlog-alert = 16  ; Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-step = 2    ; How many emergency workers to create if there are too many requests in the queue
