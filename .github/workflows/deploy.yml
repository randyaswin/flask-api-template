name: Build, Test & Deploy to AWS

on:
  push:
    branches:
      - "dev"
      - "staging"

jobs:
  # Build & Push Image to ECR

  build:
    name: Build Image to ECR
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Parameter Store
        run: |
          aws ssm get-parameter --name ${{ secrets.PARAMATER_NAME }}  --with-decryption --region ${{ secrets.AWS_DEFAULT_REGION }} | jq -r '.Parameter.Value' > api/.env
          echo "$GITHUB_REF_NAME"

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPOSITORY_URL }}
          STATIC_TAG: ${{ secrets.VERSION }}
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$STATIC_TAG.$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$STATIC_TAG.$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  test:
    name: Test
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    needs: build

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Test
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPOSITORY_URL }}
          STATIC_TAG: ${{ secrets.VERSION }}
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker run --rm $ECR_REGISTRY/$ECR_REPOSITORY:$STATIC_TAG.$IMAGE_TAG pytest -v

  # Deploy to Develop ECS

  deploy_api:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    needs: test

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition
        env:
          AWS_ECS_TASK_DEFINITION_API: ${{ secrets.AWS_ECS_TASK_DEFINITION_API }}
          AWS_ECS_SERVICE_API: ${{ secrets.AWS_ECS_SERVICE_API }}
          AWS_ECS_TASK_DEFINITION_WORKER: ${{ secrets.AWS_ECS_TASK_DEFINITION_WORKER }}
          AWS_ECS_SERVICE_WORKER: ${{ secrets.AWS_ECS_SERVICE_WORKER }}
          AWS_ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}

          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPOSITORY_URL }}
          STATIC_TAG: ${{ secrets.VERSION }}
          IMAGE_TAG: ${{ github.run_number }}

        run: |
          echo `aws ecs describe-task-definition --task-definition ${{ secrets.AWS_ECS_TASK_DEFINITION_API }} --region ${{ secrets.AWS_DEFAULT_REGION }}` > input.json
          echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].image="'$ECR_REGISTRY/$ECR_REPOSITORY:$STATIC_TAG.$IMAGE_TAG'"') > input.json
          echo $(cat input.json | jq '.taskDefinition') > input.json
          echo $(cat input.json | jq 'del(.taskDefinitionArn)' | jq 'del(.revision)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.registeredAt)' | jq 'del(.registeredBy)' | jq 'del(.compatibilities)') > input.json
          aws ecs register-task-definition --cli-input-json file://input.json --region ${{ secrets.AWS_DEFAULT_REGION }}
          revision=$(aws ecs describe-task-definition --task-definition ${{ secrets.AWS_ECS_TASK_DEFINITION_API }} --region ${{ secrets.AWS_DEFAULT_REGION }} | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//' | cut -d "," -f 1)
          aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER }} --service ${{ secrets.AWS_ECS_SERVICE_API }} --task-definition ${{ secrets.AWS_ECS_TASK_DEFINITION_API }}:$revision --region ${{ secrets.AWS_DEFAULT_REGION }}

  deploy_worker:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    needs: test

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition
        env:
          AWS_ECS_TASK_DEFINITION_API: ${{ secrets.AWS_ECS_TASK_DEFINITION_API }}
          AWS_ECS_SERVICE_API: ${{ secrets.AWS_ECS_SERVICE_API }}
          AWS_ECS_TASK_DEFINITION_WORKER: ${{ secrets.AWS_ECS_TASK_DEFINITION_WORKER }}
          AWS_ECS_SERVICE_WORKER: ${{ secrets.AWS_ECS_SERVICE_WORKER }}
          AWS_ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}

          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPOSITORY_URL }}
          STATIC_TAG: ${{ secrets.VERSION }}
          IMAGE_TAG: ${{ github.run_number }}

        run: |
          echo `aws ecs describe-task-definition --task-definition ${{ secrets.AWS_ECS_TASK_DEFINITION_WORKER }} --region ${{ secrets.AWS_DEFAULT_REGION }}` > input.json
          echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].image="'$ECR_REGISTRY/$ECR_REPOSITORY:$STATIC_TAG.$IMAGE_TAG'"') > input.json
          echo $(cat input.json | jq '.taskDefinition') > input.json
          echo $(cat input.json | jq 'del(.taskDefinitionArn)' | jq 'del(.revision)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.registeredAt)' | jq 'del(.registeredBy)' | jq 'del(.compatibilities)') > input.json
          aws ecs register-task-definition --cli-input-json file://input.json --region ${{ secrets.AWS_DEFAULT_REGION }}
          revision=$(aws ecs describe-task-definition --task-definition ${{ secrets.AWS_ECS_TASK_DEFINITION_WORKER }} --region ${{ secrets.AWS_DEFAULT_REGION }} | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//' | cut -d "," -f 1)
          aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER }} --service ${{ secrets.AWS_ECS_SERVICE_WORKER }} --task-definition ${{ secrets.AWS_ECS_TASK_DEFINITION_WORKER }}:$revision --region ${{ secrets.AWS_DEFAULT_REGION }}
